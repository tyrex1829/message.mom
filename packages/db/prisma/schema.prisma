// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime

  username      String    @unique
  profile       Profile?
  messages      Message[] @relation("OwnerMessages")

  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Profile {
  id              String    @id @default(cuid())
  userId          String    @unique
  avatarUrl       String?
  bio             String?   @db.Text
  socialsJson     Json?
  lastSeenVisible Boolean   @default(true)
  createdAt       DateTime  @default(now()) @db.Timestamptz
  updatedAt       DateTime  @updatedAt @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Message {
  id            String    @id @default(cuid())
  ownerId       String
  body          String    @db.Text
  createdAt     DateTime  @default(now()) @db.Timestamptz
  replyBody     String?   @db.Text
  repliedAt     DateTime? @db.Timestamptz
  viewTokenHash String    @db.VarChar(128)

  owner User @relation("OwnerMessages", fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId, createdAt])
  @@map("message")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}